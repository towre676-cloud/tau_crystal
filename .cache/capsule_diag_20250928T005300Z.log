[stage] repro run with bash -x
[run] scripts/meta/capsule_seal_set.sh
[rc=0] scripts/meta/capsule_seal_set.sh
[run] scripts/meta/corridor_bind_capsules.sh
[rc=0] scripts/meta/corridor_bind_capsules.sh
[run] scripts/docs/gen_module_catalog.sh
[rc=1] scripts/docs/gen_module_catalog.sh
[run] scripts/ci/lean_capsule_gate.sh
[rc=66] scripts/ci/lean_capsule_gate.sh
[stage] tail of repro log
+ cd /c/Users/Cody/Desktop/tau_crystal/tau_crystal
+ set -euo pipefail
+ set +H
+ umask 022
+ export LC_ALL=C LANG=C
+ LC_ALL=C
+ LANG=C
+ BASE=.tau_ledger/lean_module_capsules
+ IDX=.tau_ledger/lean_module_capsules/index.json
+ SHA=.tau_ledger/lean_module_capsules/index.sha256
+ '[' -s .tau_ledger/lean_module_capsules/index.json ']'
++ cut '-d ' -f1 .tau_ledger/lean_module_capsules/index.sha256
+ root=ed99b142b7e65a6895d31eb341a592c89ff5d5cb934cdf454a2aa31984ec781b
+ '[' -n ed99b142b7e65a6895d31eb341a592c89ff5d5cb934cdf454a2aa31984ec781b ']'
++ lake env lean --version
++ head -n1
+ tc='Lean (version 4.22.0, x86_64-w64-windows-gnu, commit ba2cbbf09d4978f416e0ebd1fceeebc2c4138c05, Release)'
++ lake --version
++ head -n1
+ lv='Lake version 5.0.0-src+ba2cbbf (Lean version 4.22.0)'
++ find .tau_ledger/lean_module_capsules -type f -name '*.json' '!' -name index.json
++ wc -l
++ tr -d '[:space:]'
+ tot=4
++ grep -c '"build_ok":1' .tau_ledger/lean_module_capsules/index.json
++ echo 0
+ ok='0
0'
++ grep -c '"build_ok":0' .tau_ledger/lean_module_capsules/index.json
+ bad=2
++ date -u +%Y-%m-%dT%H:%M:%SZ
+ now=2025-09-28T00:53:03Z
+ out=.tau_ledger/lean_module_capsules/capsule_set.seal.json
+ :
+ printf '{'
+ printf '"kind":"lean.module.capsule.set",'
+ printf '"root_hash":"%s",' ed99b142b7e65a6895d31eb341a592c89ff5d5cb934cdf454a2aa31984ec781b
+ printf '"sealed_at":"%s",' 2025-09-28T00:53:03Z
+ printf '"toolchain":"%s",' 'Lean (version 4.22.0, x86_64-w64-windows-gnu, commit ba2cbbf09d4978f416e0ebd1fceeebc2c4138c05, Release)'
+ printf '"lake":"%s",' 'Lake version 5.0.0-src+ba2cbbf (Lean version 4.22.0)'
+ printf '"total_modules":%s,' 4
+ printf '"build_ok":%s,' '0
0'
+ printf '"build_fail":%s,' 2
+ printf '"index_path":"%s"' .tau_ledger/lean_module_capsules/index.json
+ printf '}\n'
+ cd /c/Users/Cody/Desktop/tau_crystal/tau_crystal
+ set -euo pipefail
+ set +H
+ umask 022
+ export LC_ALL=C LANG=C
+ LC_ALL=C
+ LANG=C
+ BASE=.tau_ledger/lean_module_capsules
+ SEAL=.tau_ledger/lean_module_capsules/capsule_set.seal.json
+ IDX=.tau_ledger/lean_module_capsules/index.json
+ '[' -s .tau_ledger/lean_module_capsules/capsule_set.seal.json ']'
+ out=docs/ledger/lean_capsule_manifest.json
+ :
+ printf '{'
+ printf '"kind":"corridor.manifest.lean_capsules",'
++ cat .tau_ledger/lean_module_capsules/capsule_set.seal.json
+ printf '"seal":%s,' '{"kind":"lean.module.capsule.set","root_hash":"ed99b142b7e65a6895d31eb341a592c89ff5d5cb934cdf454a2aa31984ec781b","sealed_at":"2025-09-28T00:53:03Z","toolchain":"Lean (version 4.22.0, x86_64-w64-windows-gnu, commit ba2cbbf09d4978f416e0ebd1fceeebc2c4138c05, Release)","lake":"Lake version 5.0.0-src+ba2cbbf (Lean version 4.22.0)","total_modules":4,"build_ok":0
0,"build_fail":2,"index_path":".tau_ledger/lean_module_capsules/index.json"}'
+ printf '"index_path":"%s"' .tau_ledger/lean_module_capsules/index.json
+ printf '}\n'
+ cd /c/Users/Cody/Desktop/tau_crystal/tau_crystal
+ set -euo pipefail
+ set +H
+ umask 022
+ export LC_ALL=C LANG=C
+ LC_ALL=C
+ LANG=C
+ BASE=.tau_ledger/lean_module_capsules
+ OUT=docs/modules/index.html
+ :
+ printf '%s\n' '<!doctype html><meta charset=utf-8><title>Lean Module Capsules</title>'
+ printf '%s\n' '<h1>Lean Module Capsules</h1><p>Sealed per-module build receipts.</p><table border=1 cellpadding=6 cellspacing=0><tr><th>Module</th><th>Build</th><th>ms</th><th>src bytes</th><th>olean bytes</th><th>sealed</th></tr>'
+ find .tau_ledger/lean_module_capsules -type f -name '*.json' '!' -name index.json -print0
+ sort -z
+ IFS=
+ read -r -d '' j
++ grep -m1 '"module":' .tau_ledger/lean_module_capsules/capsule_set.seal.json
++ sed -E 's/.*"module":"([^"]+)".*/\1/'
+ mod=
+ cd /c/Users/Cody/Desktop/tau_crystal/tau_crystal
+ set -euo pipefail
+ set +H
+ umask 022
+ export LC_ALL=C LANG=C
+ LC_ALL=C
+ LANG=C
+ IDX=.tau_ledger/lean_module_capsules/index.json
+ '[' -s .tau_ledger/lean_module_capsules/index.json ']'
+ grep -q '"build_ok":0' .tau_ledger/lean_module_capsules/index.json
+ echo '[gate] FAIL: some modules failed cold capsule test'
[gate] FAIL: some modules failed cold capsule test
+ exit 66
[stage] presence checks
[ok] %s bytes %s
2063
.tau_ledger/lean_module_capsules/index.json
[ok] %s bytes %s
110
.tau_ledger/lean_module_capsules/index.sha256
[ok] %s bytes %s
436
.tau_ledger/lean_module_capsules/capsule_set.seal.json
[stage] quick JSON sanity (brace/bracket balance heuristics, no jq)
[peek] index.json first line: [{"kind":"lean.module.capsule.set","root_hash":"055200b4c23034b0064f80b51d097d30b805e6a023bafec5fcf0d579515b737f","sealed_at":"2025-09-28T00:51:39Z","toolchain":"Lean (version 4.22.0, x86_64-w64-windows-gnu, commit ba2cbbf09d4978f416e0ebd1fceeebc2c4138c05, Release)","lake":"Lake version 5.0.0-src+ba2cbbf (Lean version 4.22.0)","total_modules":4,"build_ok":0
[peek] index.json last  line: ,{"module":"src.Spectral.Core","path":"src/Spectral/Core.lean","imports":["Spectral.Kernel.Minimal"],"src_sha256":"eb18733248f0b7e0764348e6bbf8d3811fd05d300b1e0a52b93f556d0a2b2d49","src_bytes":1869,"olean_sha256":"NONE","olean_bytes":0,"build_ok":0,"build_time_ms":1047,"toolchain":"Lean (version 4.22.0, x86_64-w64-windows-gnu, commit ba2cbbf09d4978f416e0ebd1fceeebc2c4138c05, Release)","lake":"Lake version 5.0.0-src+ba2cbbf (Lean version 4.22.0)","last_commit":"a8a11362aee6ac73a5b80fc313fa2585b74c56be","run_utc":"2025-09-28T00:51:46Z"},{"module":"src.Spectral.face_plumbing","path":"src/Spectral/face_plumbing.lean","imports":["Spectral.Core"],"src_sha256":"70054393953c17f484d255a140e839c58dd9f92bb22acfae81ba894b216f529d","src_bytes":248,"olean_sha256":"NONE","olean_bytes":0,"build_ok":0,"build_time_ms":1049,"toolchain":"Lean (version 4.22.0, x86_64-w64-windows-gnu, commit ba2cbbf09d4978f416e0ebd1fceeebc2c4138c05, Release)","lake":"Lake version 5.0.0-src+ba2cbbf (Lean version 4.22.0)","last_commit":"a8a11362aee6ac73a5b80fc313fa2585b74c56be","run_utc":"2025-09-28T00:51:51Z"},{"module":"src.Spectral.plumbing","path":"src/Spectral/plumbing.lean","imports":["Spectral.Core"],"src_sha256":"689826a96dd4f861af1d1895a6acb093fa9d7d2d5696852bdc781db6a5e33c67","src_bytes":372,"olean_sha256":"NONE","olean_bytes":0,"build_ok":0,"build_time_ms":1030,"toolchain":"Lean (version 4.22.0, x86_64-w64-windows-gnu, commit ba2cbbf09d4978f416e0ebd1fceeebc2c4138c05, Release)","lake":"Lake version 5.0.0-src+ba2cbbf (Lean version 4.22.0)","last_commit":"a8a11362aee6ac73a5b80fc313fa2585b74c56be","run_utc":"2025-09-28T00:51:53Z"}]
[count] {} = %s/%s  [] = %s/%s
4
4
4
4
[stage] detect common script corruptions
     1	#!/usr/bin/env bash
     2	cd "$HOME/Desktop/tau_crystal/tau_crystal" || exit 1
     3	set -euo pipefail; set +H; umask 022; export LC_ALL=C LANG=C
     4	. scripts/meta/_capsule_common.sh
     5	BASE=".tau_ledger/lean_module_capsules"; TMP=".cache/capsules"; mkdir -p "$BASE" "$TMP" exe/.capsule_each
     6	rel="$1"; [ -f "$rel" ] || { echo "[err] missing: $rel"; exit 2; }
     7	case "$rel" in ./*) rel="${rel#./}";; esac
     8	mod="${rel%.lean}"; mod="${mod//\//.}"
     9	run_utc=$(date -u +%Y-%m-%dT%H:%M:%SZ)
    10	tc=$(lake env lean --version 2>/dev/null | head -n1 || echo "lean:unknown")
    11	lv=$(lake --version 2>/dev/null | head -n1 || echo "lake:unknown")
    12	src_sha=$(sha256 "$rel"); src_bytes=$(wc -c < "$rel" | tr -d "[:space:]")
    13	last_commit=$(git log -n1 --pretty=format:%H -- "$rel" 2>/dev/null || echo "UNTRACKED")
    14	impt="$TMP/_imports.$$"; : > "$impt"
    15	grep -E "^import[[:space:]]+" "$rel" 2>/dev/null | sed "s/^import[[:space:]]\\+//" | tr -d "\r" | while IFS= read -r line; do for tok in $line; do printf "%s\n" "$tok" >> "$impt"; done; done
    16	hfile="exe/.capsule_each/${mod//./_}.lean"; mkdir -p "$(dirname "$hfile")"; : > "$hfile"
    17	printf "%s\n" "import ${mod}" >> "$hfile"
    18	printf "%s\n" "def _capsule_probe : True := True.intro" >> "$hfile"
    19	start_ms=$(ms_now); build_ok=0; blog="$TMP/_build_${mod//./_}.log"
    20	if lake env lean --make "$hfile" >"$blog" 2>&1; then build_ok=1; fi
    21	end_ms=$(ms_now); dur_ms=0; if [ "$start_ms" != 0 ] && [ "$end_ms" != 0 ]; then dur_ms=$(( end_ms - start_ms )); fi
    22	olean_rel="${rel%.lean}.olean"; olean_path=".lake/build/lib/${olean_rel#src/}"
    23	olean_sha="NONE"; olean_bytes=0; if [ -f "$olean_path" ]; then olean_sha=$(sha256 "$olean_path"); olean_bytes=$(wc -c < "$olean_path" | tr -d "[:space:]"); fi
    24	imps=$(json_arr_from_lines "$impt")
    25	out="$BASE/${mod//./_}.json"; : > "$out"
    26	printf "{" >> "$out"
    27	printf "\"module\":\"%s\"," "$mod" >> "$out"
    28	printf "\"path\":\"%s\"," "$rel" >> "$out"
    29	printf "\"imports\":%s," "$imps" >> "$out"
    30	printf "\"src_sha256\":\"%s\"," "$src_sha" >> "$out"
    31	printf "\"src_bytes\":%s," "$src_bytes" >> "$out"
    32	printf "\"olean_sha256\":\"%s\"," "$olean_sha" >> "$out"
    33	printf "\"olean_bytes\":%s," "$olean_bytes" >> "$out"
    34	printf "\"build_ok\":%s," "$build_ok" >> "$out"
    35	printf "\"build_time_ms\":%s," "$dur_ms" >> "$out"
    36	printf "\"toolchain\":\"%s\"," "$tc" >> "$out"
    37	printf "\"lake\":\"%s\"," "$lv" >> "$out"
    38	printf "\"last_commit\":\"%s\"," "$last_commit" >> "$out"
    39	printf "\"run_utc\":\"%s\"" "$run_utc" >> "$out"
    40	printf "}" >> "$out"
    41	echo "[capsule] ${mod} build_ok=$build_ok ms=$dur_ms"
11:lv=$(lake --version 2>/dev/null | head -n1 || echo "lake:unknown")
24:imps=$(json_arr_from_lines "$impt")
35:printf "\"build_time_ms\":%s," "$dur_ms" >> "$out"
[stage] olean build map snapshot
lean/Tau/DeltaComplex.olean
lean/Tau/LeafGroup.olean
lean/Tau/ProveV2.olean
lean/TauProofs.olean
lean/TauProofs/Cohomology.olean
lean/TauProofs/Leaf.olean
lean/TauProofs/TauBounds.olean
[stage] failing capsules (if any)
1:[{"kind":"lean.module.capsule.set","root_hash":"055200b4c23034b0064f80b51d097d30b805e6a023bafec5fcf0d579515b737f","sealed_at":"2025-09-28T00:51:39Z","toolchain":"Lean (version 4.22.0, x86_64-w64-windows-gnu, commit ba2cbbf09d4978f416e0ebd1fceeebc2c4138c05, Release)","lake":"Lake version 5.0.0-src+ba2cbbf (Lean version 4.22.0)","total_modules":4,"build_ok":0
3:,{"module":"src.Spectral.Core","path":"src/Spectral/Core.lean","imports":["Spectral.Kernel.Minimal"],"src_sha256":"eb18733248f0b7e0764348e6bbf8d3811fd05d300b1e0a52b93f556d0a2b2d49","src_bytes":1869,"olean_sha256":"NONE","olean_bytes":0,"build_ok":0,"build_time_ms":1047,"toolchain":"Lean (version 4.22.0, x86_64-w64-windows-gnu, commit ba2cbbf09d4978f416e0ebd1fceeebc2c4138c05, Release)","lake":"Lake version 5.0.0-src+ba2cbbf (Lean version 4.22.0)","last_commit":"a8a11362aee6ac73a5b80fc313fa2585b74c56be","run_utc":"2025-09-28T00:51:46Z"},{"module":"src.Spectral.face_plumbing","path":"src/Spectral/face_plumbing.lean","imports":["Spectral.Core"],"src_sha256":"70054393953c17f484d255a140e839c58dd9f92bb22acfae81ba894b216f529d","src_bytes":248,"olean_sha256":"NONE","olean_bytes":0,"build_ok":0,"build_time_ms":1049,"toolchain":"Lean (version 4.22.0, x86_64-w64-windows-gnu, commit ba2cbbf09d4978f416e0ebd1fceeebc2c4138c05, Release)","lake":"Lake version 5.0.0-src+ba2cbbf (Lean version 4.22.0)","last_commit":"a8a11362aee6ac73a5b80fc313fa2585b74c56be","run_utc":"2025-09-28T00:51:51Z"},{"module":"src.Spectral.plumbing","path":"src/Spectral/plumbing.lean","imports":["Spectral.Core"],"src_sha256":"689826a96dd4f861af1d1895a6acb093fa9d7d2d5696852bdc781db6a5e33c67","src_bytes":372,"olean_sha256":"NONE","olean_bytes":0,"build_ok":0,"build_time_ms":1030,"toolchain":"Lean (version 4.22.0, x86_64-w64-windows-gnu, commit ba2cbbf09d4978f416e0ebd1fceeebc2c4138c05, Release)","lake":"Lake version 5.0.0-src+ba2cbbf (Lean version 4.22.0)","last_commit":"a8a11362aee6ac73a5b80fc313fa2585b74c56be","run_utc":"2025-09-28T00:51:53Z"}]
[stage] show diag log path
