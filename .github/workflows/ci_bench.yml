name: ci-bench
on:
  workflow_dispatch: {}

jobs:
  cold:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Compute cache key
        id: key
        run: |
          set -Eeuo pipefail; set +H
          if [ -f lake-manifest.json ]; then k=$(sha256sum lake-manifest.json | cut -c1-12); else k=$(date +%s); fi
          echo "val=${{ runner.os }}-$k" >> "$GITHUB_OUTPUT"
      - name: Setup Lean toolchain
        shell: bash
        run: |
          set -Eeuo pipefail; set +H
          scripts/ci/setup_lean.sh
      - name: Cold build and time
        run: |
          set -Eeuo pipefail; set +H
          rm -rf .lake 2>/dev/null || true
          ts="$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          start=$(date +%s)
          lake build || true
          end=$(date +%s)
          secs=$(( end - start ))
          mkdir -p .tau_ledger/bench
          os="$(uname -s 2>/dev/null || echo unknown)"; runner=github
          printf "{\"timestamp\":\"%s\",\"os\":\"%s\",\"runner\":\"%s\",\"type\":\"cold\",\"seconds\":%s}\n" "$ts" "$os" "$runner" "$secs" >> .tau_ledger/bench/runs.ndjson
      - name: Save cache
        uses: actions/cache/save@v4
        with:
          path: |
            .lake
            lake-packages
            lean_packages
          key: ${{ steps.key.outputs.val }}
      - name: Upload cold ndjson
        uses: actions/upload-artifact@v4
        with:
          name: runs-cold
          path: .tau_ledger/bench/runs.ndjson
  warm:
    runs-on: ubuntu-latest
    needs: cold
    steps:
      - uses: actions/checkout@v4
      - name: Compute cache key
        id: key
        run: |
          set -Eeuo pipefail; set +H
          if [ -f lake-manifest.json ]; then k=$(sha256sum lake-manifest.json | cut -c1-12); else k=$(date +%s); fi
          echo "val=${{ runner.os }}-$k" >> "$GITHUB_OUTPUT"
      - name: Setup Lean toolchain
        shell: bash
        run: |
          set -Eeuo pipefail; set +H
          scripts/ci/setup_lean.sh
      - name: Restore cache
        uses: actions/cache/restore@v4
        with:
          path: |
            .lake
            lake-packages
            lean_packages
          key: ${{ steps.key.outputs.val }}
      - name: Warm build and time
        run: |
          set -Eeuo pipefail; set +H
          ts="$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          start=$(date +%s)
          lake build || true
          end=$(date +%s)
          secs=$(( end - start ))
          mkdir -p .tau_ledger/bench
          os="$(uname -s 2>/dev/null || echo unknown)"; runner=github
          printf "{\"timestamp\":\"%s\",\"os\":\"%s\",\"runner\":\"%s\",\"type\":\"warm\",\"seconds\":%s}\n" "$ts" "$os" "$runner" "$secs" >> .tau_ledger/bench/runs.ndjson
      - name: Upload warm ndjson
        uses: actions/upload-artifact@v4
        with:
          name: runs-warm
          path: .tau_ledger/bench/runs.ndjson
  publish:
    runs-on: ubuntu-latest
    needs: [cold, warm]
    steps:
      - uses: actions/checkout@v4
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: runs-*
          merge-multiple: true
      - name: Merge NDJSON and regenerate table
        run: |
          set -Eeuo pipefail; set +H
          mkdir -p .tau_ledger/bench docs/benchmarks scripts/bin
          cat runs-cold/runs.ndjson runs-warm/runs.ndjson > .tau_ledger/bench/runs.tmp || true
          grep -a -E "^\{[^}]*\}$" .tau_ledger/bench/runs.tmp > .tau_ledger/bench/runs.ndjson || : 
          : > scripts/bin/bench_ci_speed.awk
          printf "BEGIN{ OFS=\\"|\\"; print \\"# CI speed benchmarks (receipt-backed)\\\\n\\"; print \\"All entries are medians over attested runs from \`.tau_ledger/bench/runs.ndjson\`. The acceleration factor is cold/warm.\\\\n\\"; print \\"| OS | Runner | N(cold) | median_cold_s | N(warm) | median_warm_s | factor (cold/warm) |\\"; print \\"|---|---|---:|---:|---:|---:|---:|\\" }\\n" >> scripts/bin/bench_ci_speed.awk
          printf "function addkey(k){ if(!(k in seen)){ seen[k]=1; keys[++K]=k } }\\n" >> scripts/bin/bench_ci_speed.awk
          printf "function push(a,v){ n[a]++; s[a, n[a]]=v+0 }\\n" >> scripts/bin/bench_ci_speed.awk
          printf "function median(a, m,i,j,t,x){ m=n[a]; if(m<1) return 0; for(i=1;i<=m;i++){ x[i]=s[a,i] } for(i=2;i<=m;i++){ t=x[i]; j=i-1; while(j>=1 && x[j]>t){ x[j+1]=x[j]; j-- } x[j+1]=t } return (m%2? x[(m+1)/2] : (x[m/2]+x[m/2+1])/2) }\\n" >> scripts/bin/bench_ci_speed.awk
          printf "{ line=$0; if(line!~/^\\{.*\\}$/) next; os=\"\"; run=\"\"; typ=\"\"; secs=0; if(match(line,/\\"os\\":\\"([^\\"]+)\\\\"/,M)) os=M[1]; if(match(line,/\\"runner\\":\\"([^\\"]+)\\\\"/,R)) run=R[1]; if(match(line,/\\"type\\":\\"([^\\"]+)\\\\"/,T)) typ=T[1]; if(match(line,/\\"seconds\\":([0-9.]+)/,S)) secs=S[1]+0; k=os SUBSEP run; addkey(k); if(typ==\\"cold\\") push(k SUBSEP \\"C\\", secs); else if(typ==\\"warm\\") push(k SUBSEP \\"W\\", secs) }\\n" >> scripts/bin/bench_ci_speed.awk
          printf "END{ for(i=1;i<=K;i++){ split(keys[i],p,SUBSEP); os=p[1]; run=p[2]; nc=n[keys[i] SUBSEP \\"C\\"]; nw=n[keys[i] SUBSEP \\"W\\"]; mc=median(keys[i] SUBSEP \\"C\\"); mw=median(keys[i] SUBSEP \\"W\\"); fac=(mw>0? mc/mw : 0); printf(\\"| %s | %s | %d | %.2f | %d | %.2f | %.2f |\\\\n\\", os, run, nc, mc, nw, mw, fac) } }\\n" >> scripts/bin/bench_ci_speed.awk
          awk -f scripts/bin/bench_ci_speed.awk .tau_ledger/bench/runs.ndjson > docs/benchmarks/ci_speed.md
      - name: Commit and push docs
        env:
          GIT_AUTHOR_NAME: tau-crystal-bot
          GIT_AUTHOR_EMAIL: bot@example.com
          GIT_COMMITTER_NAME: tau-crystal-bot
          GIT_COMMITTER_EMAIL: bot@example.com
        run: |
          set -Eeuo pipefail; set +H
          git add .tau_ledger/bench/runs.ndjson docs/benchmarks/ci_speed.md || true
          git diff --cached --quiet || git commit -m "bench: update NDJSON and CI speed table"
          git push
