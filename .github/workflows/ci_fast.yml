name: ci-fast
on:
  push:
    branches: ["**"]
    paths-ignore:
      - 'docs/**'
      - '**/*.md'
      - '.tau_ledger/**'
  pull_request:
    paths-ignore:
      - 'docs/**'
      - '**/*.md'
      - '.tau_ledger/**'
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  fast:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - name: Setup Lean
        run: scripts/ci/setup_lean.sh
      - name: Compute cache key
        id: key
        shell: bash
        run: |
          set -Eeuo pipefail; set +H
          if [ -f lake-manifest.json ]; then
            k=$(sha256sum lake-manifest.json | cut -c1-12)
          else
            h1=$(sha256sum lean-toolchain 2>/dev/null | cut -c1-12 || echo none)
            h2=$(sha256sum lakefile.lean 2>/dev/null | cut -c1-12 || echo none)
            k="$h1-$h2"
          fi
          echo "::notice::cache-key: ${{ runner.os }}-$k"
          echo "val=${{ runner.os }}-$k" >> "$GITHUB_OUTPUT"
      - name: Restore cache
        uses: actions/cache/restore@v4
        with:
          key: ${{ steps.key.outputs.val }}
          restore-keys: |
            ${{ runner.os }}-
          path: |
            .lake
            lake-packages
            lean_packages
      - name: Decide fast-path and run
        id: decide
        shell: bash
        run: |
          set -Eeuo pipefail; set +H
          before="${{ github.event.before }}"
          sha="${{ github.sha }}"
          if [ -z "${before:-}" ] || [ "$before" = "0000000000000000000000000000000000000000" ]; then
            changed=$(git ls-files)
          else
            changed=$(git diff --name-only "$before" "$sha")
          fi
          top_dirs=$(printf "%s\n" "$changed" | awk -F/ 'NF>1{print $1}' | sort -u)
          roots=$(printf "%s\n" "$changed" | awk -F/ 'NF==1{print}')
          n_top=$(printf "%s\n" "$top_dirs" | sed "/^$/d" | wc -l | awk "{print \$1}")
          if [ -z "$roots" ] && [ "$n_top" -eq 1 ]; then
            dir="$top_dirs"
            if [ -f "$dir/Makefile" ] && grep -qE '^[[:space:]]*ci-fast[[:space:]]*:' "$dir/Makefile"; then
              echo "::notice::module fast-path: $dir"
              echo "fast_path=module:$dir" >> "$GITHUB_OUTPUT"
              make -C "$dir" ci-fast
              exit 0
            fi
          fi
          if [ -n "$roots" ] && [ -f Makefile ] && grep -qE '^[[:space:]]*ci-fast[[:space:]]*:' Makefile; then
            echo "::notice::root fast-path"
            echo "fast_path=root" >> "$GITHUB_OUTPUT"
            make ci-fast
            exit 0
          fi
          echo "::notice::fallback: lake build"
          echo "fast_path=fallback" >> "$GITHUB_OUTPUT"
          lake build
      - name: Save cache
        if: always()
        uses: actions/cache/save@v4
        with:
          key: ${{ steps.key.outputs.val }}
          path: |
            .lake
            lake-packages
            lean_packages
      - name: Summary
        run: echo "Chosen: ${{ steps.decide.outputs.fast_path }}" >> $GITHUB_STEP_SUMMARY
