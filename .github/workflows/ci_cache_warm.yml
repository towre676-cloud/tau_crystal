name: ci-cache-warm

on:
  schedule:
    - cron: '17 3 * * *'   # daily 03:17 UTC
  workflow_dispatch:

concurrency:
  group: cache-warm
  cancel-in-progress: true

jobs:
  warm:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Python deps resolve/download only (if manifests exist)
      - name: Cache Python
        if: ${{ hashFiles('**/requirements.txt', '**/poetry.lock', '**/pyproject.toml') != '' }}
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.cache/pypoetry
          key: ${{ runner.os }}-py-${{ hashFiles('**/requirements.txt', '**/poetry.lock', '**/pyproject.toml') }}

      # Node deps download only
      - name: Cache Node
        if: ${{ hashFiles('**/package-lock.json', '**/pnpm-lock.yaml', '**/yarn.lock') != '' }}
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            ~/.pnpm-store
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json', '**/pnpm-lock.yaml', '**/yarn.lock') }}

      # Go modules warmup
      - name: Cache Go modules
        if: ${{ hashFiles('**/go.sum') != '' }}
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
          key: ${{ runner.os }}-gomod-${{ hashFiles('**/go.sum') }}
      - name: Go download
        if: ${{ hashFiles('**/go.mod') != '' }}
        run: go mod download

      # Rust sccache + cargo-chef deps compile only
      - name: Setup sccache
        if: ${{ hashFiles('**/Cargo.toml') != '' }}
        uses: mozilla-actions/sccache-action@v0.0.3
      - name: Enable sccache
        if: ${{ hashFiles('**/Cargo.toml') != '' }}
        run: |
          echo "RUSTC_WRAPPER=$(which sccache)" >> "$GITHUB_ENV"
          echo "SCCACHE_GHA_ENABLED=on" >> "$GITHUB_ENV"
      - name: Install cargo-chef
        if: ${{ hashFiles('**/Cargo.toml') != '' }}
        run: cargo install cargo-chef --locked
      - name: cargo-chef prepare
        if: ${{ hashFiles('**/Cargo.toml') != '' }}
        run: cargo chef prepare --recipe-path recipe.json
      - name: Cache cargo-chef layers
        if: ${{ hashFiles('**/Cargo.toml') != '' }}
        uses: actions/cache@v4
        with:
          path: |
            target
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-chef-${{ hashFiles('recipe.json') }}
      - name: cargo-chef cook (deps only)
        if: ${{ hashFiles('**/Cargo.toml') != '' }}
        run: cargo chef cook --recipe-path recipe.json --release

      # Docker Buildx cache warm
      - name: Setup Docker Buildx
        if: ${{ hashFiles('**/Dockerfile') != '' }}
        uses: docker/setup-buildx-action@v3
      - name: Warm Buildx cache
        if: ${{ hashFiles('**/Dockerfile') != '' }}
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          tags: tau-crystal/warm:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
