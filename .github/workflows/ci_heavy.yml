name: ci-heavy

on:
  push:
    paths-ignore:
      - 'docs/**'
      - '**/*.md'
      - '.github/workflows/spec_guard.yml'
  pull_request:
    paths-ignore:
      - 'docs/**'
      - '**/*.md'
      - '.github/workflows/spec_guard.yml'

concurrency:
  group: heavy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        shard: [0, 1, 2, 3]
    steps:
      - uses: actions/checkout@v4

      # --------------------------
      # Dependency/toolchain caches
      # --------------------------
      - name: Cache Python (pip)
        if: ${{ hashFiles('**/requirements.txt', '**/poetry.lock', '**/pyproject.toml') != '' }}
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.cache/pypoetry
          key: ${{ runner.os }}-py-${{ hashFiles('**/requirements.txt', '**/poetry.lock', '**/pyproject.toml') }}

      - name: Cache Node (npm/pnpm/yarn)
        if: ${{ hashFiles('**/package-lock.json', '**/pnpm-lock.yaml', '**/yarn.lock') != '' }}
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            ~/.pnpm-store
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json', '**/pnpm-lock.yaml', '**/yarn.lock') }}

      - name: Cache Rust (cargo)
        if: ${{ hashFiles('**/Cargo.lock') != '' }}
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache Go (modules)
        if: ${{ hashFiles('**/go.sum') != '' }}
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
          key: ${{ runner.os }}-gomod-${{ hashFiles('**/go.sum') }}

      - name: Cache Go build cache
        if: ${{ hashFiles('**/go.mod') != '' }}
        uses: actions/cache@v4
        with:
          path: |
            ~/go/build
            ~/.cache/go-build
          key: ${{ runner.os }}-gobuild-${{ hashFiles('**/*.go','**/go.mod','**/go.sum') }}

      # --------------------------
      # Prepare test shard (language-agnostic)
      # --------------------------
      - name: Prepare test shard
        id: shard
        run: |
          bash scripts/ci/shard_list.sh ${{ matrix.shard }} 4
          echo "Files in shard ${{ matrix.shard }}:"
          [ -s "${{ steps.shard.outputs.filesfile }}" ] && nl -ba "${{ steps.shard.outputs.filesfile }}" || echo "(none)"

      # --------------------------
      # Example runners (guarded by manifests)
      # --------------------------
      - name: Run pytest (sharded)
        if: ${{ steps.shard.outputs.count != '0' && hashFiles('**/pytest.ini', '**/pyproject.toml', '**/requirements.txt') != '' }}
        run: |
          set -Eeuo pipefail
          xargs -a "${{ steps.shard.outputs.filesfile }}" -r -n 50 python -m pytest -q --maxfail=1

      - name: Run Go tests
        if: ${{ hashFiles('**/go.mod') != '' }}
        run: |
          set -Eeuo pipefail
          go test ./... -count=1 -parallel=4

      # Rust with sccache acceleration
      - name: Setup sccache
        if: ${{ hashFiles('**/Cargo.toml') != '' }}
        uses: mozilla-actions/sccache-action@v0.0.3

      - name: Enable sccache for rustc
        if: ${{ hashFiles('**/Cargo.toml') != '' }}
        run: |
          echo "RUSTC_WRAPPER=$(which sccache)" >> "$GITHUB_ENV"
          echo "SCCACHE_GHA_ENABLED=on" >> "$GITHUB_ENV"

      - name: Run Rust tests
        if: ${{ hashFiles('**/Cargo.toml') != '' }}
        run: |
          set -Eeuo pipefail
          cargo test --all --locked --quiet

      - name: Run Node tests
        if: ${{ hashFiles('**/package-lock.json') != '' }}
        run: |
          set -Eeuo pipefail
          npm ci
          npm test --silent

      # --------------------------
      # Docker Buildx cached build (if repo has a Dockerfile)
      # --------------------------
      - name: Setup Docker Buildx
        if: ${{ hashFiles('**/Dockerfile') != '' }}
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker buildx layers
        if: ${{ hashFiles('**/Dockerfile') != '' }}
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ hashFiles('**/Dockerfile','**/.dockerignore','**/*') }}

      - name: Build Docker image (cached)
        if: ${{ hashFiles('**/Dockerfile') != '' }}
        run: |
          set -Eeuo pipefail
          mkdir -p /tmp/.buildx-cache
          docker buildx build \
            --cache-from type=local,src=/tmp/.buildx-cache \
            --cache-to   type=local,dest=/tmp/.buildx-cache-new,mode=max \
            -t tau-crystal/ci:latest .
          rm -rf /tmp/.buildx-cache && mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: No matching test runner
        if: ${{ always() && steps.shard.outputs.count == '0' && hashFiles('**/pytest.ini', '**/pyproject.toml', '**/requirements.txt', '**/go.mod', '**/Cargo.toml', '**/package-lock.json') == '' }}
        run: echo "[info] No known test manifests found; nothing to run in this job."
