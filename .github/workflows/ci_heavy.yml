name: ci-heavy

on:
  push:
    paths-ignore:
      - 'docs/**'
      - '**/*.md'
      - '.github/workflows/spec_guard.yml'
  pull_request:
    paths-ignore:
      - 'docs/**'
      - '**/*.md'
      - '.github/workflows/spec_guard.yml'

concurrency:
  group: heavy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      python:     ${{ steps.filter.outputs.python }}
      go:         ${{ steps.filter.outputs.go }}
      rust:       ${{ steps.filter.outputs.rust }}
      node:       ${{ steps.filter.outputs.node }}
      docker:     ${{ steps.filter.outputs.docker }}
      tests_any:  ${{ steps.filter.outputs.tests }}
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - id: filter
        uses: dorny/paths-filter@v3
        with:
          token: ${{ github.token }}
          filters: |
            python:
              - '**/*.py'
              - 'pyproject.toml'
              - 'poetry.lock'
              - 'requirements.txt'
              - 'requirements-dev.txt'
              - 'pytest.ini'
            go:
              - '**/*.go'
              - 'go.mod'
              - 'go.sum'
            rust:
              - '**/*.rs'
              - 'Cargo.toml'
              - 'Cargo.lock'
            node:
              - '**/*.{js,jsx,ts,tsx}'
              - 'package.json'
              - 'package-lock.json'
              - 'pnpm-lock.yaml'
              - 'yarn.lock'
            docker:
              - '**/Dockerfile'
              - '**/.dockerignore'
            tests:
              - 'test*/**'
              - '**/*_test.*'
              - '**/*.test.*'

  matrix:
    runs-on: ubuntu-latest
    needs: [changes]
    if: ${{ needs.changes.outputs.python == 'true' || needs.changes.outputs.go == 'true' || needs.changes.outputs.rust == 'true' || needs.changes.outputs.node == 'true' || needs.changes.outputs.docker == 'true' || needs.changes.outputs.tests_any == 'true' }}
    outputs:
      matrix: ${{ steps.gen.outputs.matrix }}
      total:  ${{ steps.gen.outputs.total }}
      tests:  ${{ steps.gen.outputs.tests }}
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - id: gen
        run: bash scripts/ci/generate_matrix.sh

  build-and-test:
    needs: [changes, matrix]
    runs-on: ubuntu-latest
    if: ${{ needs.matrix.result == 'success' }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.matrix.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      # ---------- FAST PATH DETECTION ----------
      - name: Detect fast-path module (single top-level dir with Makefile:ci-fast)
        id: fast
        env:
          EVENT_NAME: ${{ github.event_name }}
          PR_BASE:    ${{ github.event.pull_request.base.sha }}
          PUSH_BEFORE:${{ github.event.before }}
          HEAD_SHA:   ${{ github.sha }}
        run: |
          set -Eeuo pipefail
          BASE="$PUSH_BEFORE"
          if [ "$EVENT_NAME" = "pull_request" ] && [ -n "$PR_BASE" ]; then BASE="$PR_BASE"; fi
          if [ -z "$BASE" ]; then BASE="$(git rev-parse --short=8 HEAD^)"; fi
          git fetch --no-tags --prune --depth=2 origin "+$BASE:$BASE" || true
          changed=$(git diff --name-only "$BASE"... "$HEAD_SHA" | sed "/^\s*$/d" || true)
          if [ -z "$changed" ]; then
            echo fast=false >> "$GITHUB_OUTPUT"; exit 0; fi
          # separate root files vs top-level dirs
          root_only=1
          declare -A uniq=()
          while IFS= read -r f; do
            case "$f" in */*) uniq["${f%%/*}"]=1; root_only=0;; esac
          done <<< "$changed"
          if [ "$root_only" = 1 ]; then
            if [ -f Makefile ] && grep -qE "(^|[^#[:alnum:]_-])ci-fast\s*:" Makefile; then
              echo dir=.    >> "$GITHUB_OUTPUT"
              echo fast=true >> "$GITHUB_OUTPUT"
              echo "[info] fast-path hit: repo-root Makefile:ci-fast"
              exit 0; fi
          fi
          # if exactly one top-level dir changed and it has ci-fast -> fast
          tl=0; dir=""
          for k in "${!uniq[@]}"; do tl=$((tl+1)); dir="$k"; done
          if [ "$tl" -eq 1 ] && [ -f "$dir/Makefile" ] && grep -qE "(^|[^#[:alnum:]_-])ci-fast\s*:" "$dir/Makefile"; then
            echo dir="$dir"  >> "$GITHUB_OUTPUT"
            echo fast=true     >> "$GITHUB_OUTPUT"
            echo "[info] fast-path hit: $dir/Makefile:ci-fast"
          else
            echo fast=false >> "$GITHUB_OUTPUT"
          fi
      - name: Run fast-path target and short-circuit
        if: ${{ steps.fast.outputs.fast == 'true' }}
        run: |
          set -Eeuo pipefail
          make -C "${{ steps.fast.outputs.dir }}" ci-fast

      # ---------- SHARD PREP ----------
      - name: Prepare test shard
        if: ${{ steps.fast.outputs.fast != 'true' }}
        id: shard
        run: |
          bash scripts/ci/shard_list.sh ${{ matrix.shard }} ${{ needs.matrix.outputs.total }}
          echo "Files in shard ${{ matrix.shard }}:"
          [ -s "${{ steps.shard.outputs.filesfile }}" ] && nl -ba "${{ steps.shard.outputs.filesfile }}" || echo "(none)"

      # ---------- PYTHON ----------
      - name: Cache Python (pip)
        if: ${{ steps.fast.outputs.fast != 'true' && needs.changes.outputs.python == 'true' }}
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.cache/pypoetry
          key: ${{ runner.os }}-py-${{ hashFiles('**/requirements.txt', '**/poetry.lock', '**/pyproject.toml', 'requirements-dev.txt') }}
          restore-keys: |
            ${{ runner.os }}-py-

      - name: Install Python dev deps
        if: ${{ steps.fast.outputs.fast != 'true' && needs.changes.outputs.python == 'true' }}
        run: |
          python -m pip install -U pip
          if [ -f requirements-dev.txt ]; then
            pip install -r requirements-dev.txt
          else
            pip install pytest pytest-xdist pytest-testmon
          fi

      - name: Cache pytest testmon DB
        if: ${{ steps.fast.outputs.fast != 'true' && needs.changes.outputs.python == 'true' }}
        uses: actions/cache@v4
        with:
          path: .testmondata
          key: ${{ runner.os }}-testmon-${{ hashFiles('**/pyproject.toml','**/requirements.txt','**/requirements-dev.txt','**/pytest.ini') }}-${{ github.ref_name }}
          restore-keys: |
            ${{ runner.os }}-testmon-

      - name: Run pytest (incremental if available; else sharded)
        if: ${{ steps.fast.outputs.fast != 'true' && needs.changes.outputs.python == 'true' && steps.shard.outputs.count != '0' }}
        run: |
          set -Eeuo pipefail
          if python - <<'PY' 2>/dev/null; then MODE="testmon"; else MODE="shard"; fi
import pkgutil,sys; sys.exit(0 if pkgutil.find_loader("testmon") else 1)
PY
          if [ "$MODE" = "testmon" ]; then
            echo "[info] pytest-testmon enabled (incremental tests)"; python -m pytest -q --testmon --maxfail=1
          else
            echo "[info] pytest-testmon not present; using shard file list"
            if python - <<'PY' 2>/dev/null; then PAR="-n auto --dist loadfile"; else PAR=""; fi
import pkgutil,sys; sys.exit(0 if pkgutil.find_loader("xdist") else 1)
PY
            xargs -a "${{ steps.shard.outputs.filesfile }}" -r -n 1 python -m pytest -q ${PAR} --maxfail=1
          fi

      # ---------- GO ----------
      - name: Cache Go modules
        if: ${{ steps.fast.outputs.fast != 'true' && needs.changes.outputs.go == 'true' }}
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
          key: ${{ runner.os }}-gomod-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-gomod-

      - name: Cache Go build cache
        if: ${{ steps.fast.outputs.fast != 'true' && needs.changes.outputs.go == 'true' }}
        uses: actions/cache@v4
        with:
          path: |
            ~/go/build
            ~/.cache/go-build
          key: ${{ runner.os }}-gobuild-${{ hashFiles('**/*.go','**/go.mod','**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-gobuild-

      - name: Run Go tests
        if: ${{ steps.fast.outputs.fast != 'true' && needs.changes.outputs.go == 'true' }}
        run: go test ./... -count=1 -parallel=${{ needs.matrix.outputs.total }}

      # ---------- RUST ----------
      - name: Cache Rust (cargo)
        if: ${{ steps.fast.outputs.fast != 'true' && needs.changes.outputs.rust == 'true' }}
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Setup sccache
        if: ${{ steps.fast.outputs.fast != 'true' && needs.changes.outputs.rust == 'true' }}
        uses: mozilla-actions/sccache-action@v0.0.3

      - name: Enable sccache
        if: ${{ steps.fast.outputs.fast != 'true' && needs.changes.outputs.rust == 'true' }}
        run: |
          echo "RUSTC_WRAPPER=$(which sccache)" >> "$GITHUB_ENV"
          echo "SCCACHE_GHA_ENABLED=on" >> "$GITHUB_ENV"

      - name: Install cargo-chef
        if: ${{ steps.fast.outputs.fast != 'true' && needs.changes.outputs.rust == 'true' }}
        run: cargo install cargo-chef --locked

      - name: cargo-chef prepare
        if: ${{ steps.fast.outputs.fast != 'true' && needs.changes.outputs.rust == 'true' }}
        run: cargo chef prepare --recipe-path recipe.json

      - name: Cache cargo-chef layers
        if: ${{ steps.fast.outputs.fast != 'true' && needs.changes.outputs.rust == 'true' }}
        uses: actions/cache@v4
        with:
          path: |
            target
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-chef-${{ hashFiles('recipe.json') }}
          restore-keys: |
            ${{ runner.os }}-cargo-chef-

      - name: Install nextest
        if: ${{ steps.fast.outputs.fast != 'true' && needs.changes.outputs.rust == 'true' }}
        uses: taiki-e/install-action@v2
        with:
          tool: nextest

      - name: Run Rust tests (nextest)
        if: ${{ steps.fast.outputs.fast != 'true' && needs.changes.outputs.rust == 'true' }}
        run: cargo nextest run --all --locked --profile ci || cargo nextest run --all --locked

      - name: Upload nextest JUnit (if present)
        if: ${{ steps.fast.outputs.fast != 'true' && needs.changes.outputs.rust == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: rust-nextest-junit
          path: target/nextest-junit.xml
          if-no-files-found: ignore

      # ---------- NODE ----------
      - name: Cache Node (npm/pnpm/yarn)
        if: ${{ steps.fast.outputs.fast != 'true' && needs.changes.outputs.node == 'true' }}
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            ~/.pnpm-store
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json', '**/pnpm-lock.yaml', '**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Run Node tests
        if: ${{ steps.fast.outputs.fast != 'true' && needs.changes.outputs.node == 'true' }}
        run: |
          set -Eeuo pipefail
          if [ -f package-lock.json ]; then npm ci --prefer-offline; npm test --silent; fi

      # ---------- DOCKER ----------
      - name: Setup Docker Buildx
        if: ${{ steps.fast.outputs.fast != 'true' && needs.changes.outputs.docker == 'true' }}
        uses: docker/setup-buildx-action@v3

      - name: Build with GHA cache
        if: ${{ steps.fast.outputs.fast != 'true' && needs.changes.outputs.docker == 'true' }}
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          tags: tau-crystal/ci:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # ---------- NO-OP FALLBACK ----------
      - name: Nothing to run (skipped all stacks)
        if: ${{ steps.fast.outputs.fast != 'true' && needs.changes.outputs.python != 'true' && needs.changes.outputs.go != 'true' && needs.changes.outputs.rust != 'true' && needs.changes.outputs.node != 'true' && needs.changes.outputs.docker != 'true' }}
        run: echo "[info] No matching stacks changed; skipping heavy work."

  summary:
    needs: [changes, matrix]
    if: ${{ always() }}
    runs-on: ubuntu-latest
    steps:
      - name: CI Speed Summary
        run: |
          {
            echo "## CI Speed Summary";
            echo "";
            echo "- Stacks changed:";
            echo "  - python: ${{ needs.changes.outputs.python }}";
            echo "  - go:     ${{ needs.changes.outputs.go }}";
            echo "  - rust:   ${{ needs.changes.outputs.rust }}";
            echo "  - node:   ${{ needs.changes.outputs.node }}";
            echo "  - docker: ${{ needs.changes.outputs.docker }}";
            if [ "${{ needs.matrix.result }}" = "success" ]; then
              echo "- Tests discovered: ${{ needs.matrix.outputs.tests }}";
              echo "- Shard total:     ${{ needs.matrix.outputs.total }}";
            else
              echo "- Matrix skipped (no relevant changes)";
            fi
            echo "";
            echo "_Tip_: Adjust shard targets in .github/ci.env (TESTS_PER_SHARD, MATRIX_MAX_SHARDS).";
          } >> "$GITHUB_STEP_SUMMARY"
