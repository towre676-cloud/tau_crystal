name: ci-heavy

on:
  push:
    paths-ignore:
      - 'docs/**'
      - '**/*.md'
      - '.github/workflows/spec_guard.yml'
  pull_request:
    paths-ignore:
      - 'docs/**'
      - '**/*.md'
      - '.github/workflows/spec_guard.yml'

concurrency:
  group: heavy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Detect what changed to avoid running irrelevant stacks
  changes:
    runs-on: ubuntu-latest
    outputs:
      python:     ${{ steps.filter.outputs.python }}
      go:         ${{ steps.filter.outputs.go }}
      rust:       ${{ steps.filter.outputs.rust }}
      node:       ${{ steps.filter.outputs.node }}
      docker:     ${{ steps.filter.outputs.docker }}
      tests_any:  ${{ steps.filter.outputs.tests }}
    steps:
      - uses: actions/checkout@v4
      - id: filter
        uses: dorny/paths-filter@v3
        with:
          token: ${{ github.token }}
          filters: |
            python:
              - '**/*.py'
              - 'pyproject.toml'
              - 'poetry.lock'
              - 'requirements.txt'
              - 'pytest.ini'
            go:
              - '**/*.go'
              - 'go.mod'
              - 'go.sum'
            rust:
              - '**/*.rs'
              - 'Cargo.toml'
              - 'Cargo.lock'
            node:
              - '**/*.{js,jsx,ts,tsx}'
              - 'package.json'
              - 'package-lock.json'
              - 'pnpm-lock.yaml'
              - 'yarn.lock'
            docker:
              - '**/Dockerfile'
              - '**/.dockerignore'
            tests:
              - 'test*/**'
              - '**/*_test.*'
              - '**/*.test.*'

  build-and-test:
    needs: [changes]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        shard: [0,1,2,3,4,5,6,7]   # bump up/down to match runner quota
    steps:
      - uses: actions/checkout@v4

      # ---------- SHARD PREP (always runs; cheap) ----------
      - name: Prepare test shard
        id: shard
        run: |
          bash scripts/ci/shard_list.sh ${{ matrix.shard }} 8
          echo "Files in shard ${{ matrix.shard }}:"
          [ -s "${{ steps.shard.outputs.filesfile }}" ] && nl -ba "${{ steps.shard.outputs.filesfile }}" || echo "(none)"

      # ---------- PYTHON ----------
      - name: Cache Python (pip)
        if: ${{ needs.changes.outputs.python == 'true' }}
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.cache/pypoetry
          key: ${{ runner.os }}-py-${{ hashFiles('**/requirements.txt', '**/poetry.lock', '**/pyproject.toml') }}

      - name: Run pytest (sharded; xdist if present)
        if: ${{ needs.changes.outputs.python == 'true' && steps.shard.outputs.count != '0' }}
        run: |
          set -Eeuo pipefail
          if python - <<'PY' 2>/dev/null; then :; else echo "[info] pytest-xdist not available; running serial within shard"; fi
import pkgutil; import sys; sys.exit(0 if pkgutil.find_loader("xdist") else 1)
PY
          if [ $? -eq 0 ]; then
            xargs -a "${{ steps.shard.outputs.filesfile }}" -r -n 1 python -m pytest -q -n auto --dist loadfile --maxfail=1
          else
            xargs -a "${{ steps.shard.outputs.filesfile }}" -r -n 50 python -m pytest -q --maxfail=1
          fi

      # ---------- GO ----------
      - name: Cache Go modules
        if: ${{ needs.changes.outputs.go == 'true' }}
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
          key: ${{ runner.os }}-gomod-${{ hashFiles('**/go.sum') }}

      - name: Cache Go build cache
        if: ${{ needs.changes.outputs.go == 'true' }}
        uses: actions/cache@v4
        with:
          path: |
            ~/go/build
            ~/.cache/go-build
          key: ${{ runner.os }}-gobuild-${{ hashFiles('**/*.go','**/go.mod','**/go.sum') }}

      - name: Run Go tests
        if: ${{ needs.changes.outputs.go == 'true' }}
        run: |
          set -Eeuo pipefail
          go test ./... -count=1 -parallel=8

      # ---------- RUST ----------
      - name: Cache Rust (cargo)
        if: ${{ needs.changes.outputs.rust == 'true' }}
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Setup sccache
        if: ${{ needs.changes.outputs.rust == 'true' }}
        uses: mozilla-actions/sccache-action@v0.0.3

      - name: Enable sccache
        if: ${{ needs.changes.outputs.rust == 'true' }}
        run: |
          echo "RUSTC_WRAPPER=$(which sccache)" >> "$GITHUB_ENV"
          echo "SCCACHE_GHA_ENABLED=on" >> "$GITHUB_ENV"

      - name: Install cargo-chef
        if: ${{ needs.changes.outputs.rust == 'true' }}
        run: cargo install cargo-chef --locked

      - name: cargo-chef prepare
        if: ${{ needs.changes.outputs.rust == 'true' }}
        run: cargo chef prepare --recipe-path recipe.json

      - name: Cache cargo-chef layers
        if: ${{ needs.changes.outputs.rust == 'true' }}
        uses: actions/cache@v4
        with:
          path: |
            target
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-chef-${{ hashFiles('recipe.json') }}

      - name: cargo-chef cook
        if: ${{ needs.changes.outputs.rust == 'true' }}
        run: cargo chef cook --recipe-path recipe.json --release

      - name: Run Rust tests
        if: ${{ needs.changes.outputs.rust == 'true' }}
        run: |
          set -Eeuo pipefail
          cargo test --all --locked --quiet

      # ---------- NODE ----------
      - name: Cache Node (npm/pnpm/yarn)
        if: ${{ needs.changes.outputs.node == 'true' }}
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            ~/.pnpm-store
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json', '**/pnpm-lock.yaml', '**/yarn.lock') }}

      - name: Run Node tests
        if: ${{ needs.changes.outputs.node == 'true' }}
        run: |
          set -Eeuo pipefail
          if [ -f package-lock.json ]; then npm ci --prefer-offline && npm test --silent; fi

      # ---------- DOCKER ----------
      - name: Setup Docker Buildx
        if: ${{ needs.changes.outputs.docker == 'true' }}
        uses: docker/setup-buildx-action@v3

      - name: Build with GHA cache
        if: ${{ needs.changes.outputs.docker == 'true' }}
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          tags: tau-crystal/ci:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # ---------- NO-OP ----------
      - name: Nothing to run (skipped all stacks)
        if: ${{ needs.changes.outputs.python != 'true' && needs.changes.outputs.go != 'true' && needs.changes.outputs.rust != 'true' && needs.changes.outputs.node != 'true' && needs.changes.outputs.docker != 'true' }}
        run: echo "[info] No matching stacks changed; skipping heavy work."
