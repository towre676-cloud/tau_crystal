BEGIN{ OFS="|"; print "# CI speed benchmarks (receipt-backed)\n"; print "All entries are medians over attested runs from `.tau_ledger/bench/runs.ndjson`. The acceleration factor is cold/warm.\n"; print "| OS | Runner | N(cold) | median_cold_s | N(warm) | median_warm_s | factor (cold/warm) |"; print "|---|---|---:|---:|---:|---:|---:|" }
function addkey(k){ if(!(k in seen)){ seen[k]=1; keys[++K]=k } }
function push(arrkey, val){ n[arrkey]++; s[arrkey, n[arrkey]]=val+0 }
function median(arrkey,   m,i,j,t,a){ m=n[arrkey]; if(m<1) return 0; for(i=1;i<=m;i++) a[i]=s[arrkey,i]; for(i=2;i<=m;i++){ t=a[i]; j=i-1; while(j>=1 && a[j]>t){ a[j+1]=a[j]; j-- } a[j+1]=t } return (m%2? a[(m+1)/2] : (a[m/2]+a[m/2+1])/2) }
{ line=$0; if(line!~/^\{.*\}$/) next; os=""; runner=""; typ=""; secs=0; if(match(line,/"os":"([^"]+)"/,M)) os=M[1]; if(match(line,/"runner":"([^"]+)"/,R)) runner=R[1]; if(match(line,/"type":"([^"]+)"/,T)) typ=T[1]; if(match(line,/"seconds":([0-9.]+)/,S)) secs=S[1]+0; k=os SUBSEP runner; addkey(k); if(typ=="cold") push(k SUBSEP "C", secs); else if(typ=="warm") push(k SUBSEP "W", secs) }
END{ for(i=1;i<=K;i++){ split(keys[i],p,SUBSEP); os=p[1]; run=p[2]; nc=n[keys[i] SUBSEP "C"]; nw=n[keys[i] SUBSEP "W"]; mc=median(keys[i] SUBSEP "C"); mw=median(keys[i] SUBSEP "W"); fac=(mw>0? mc/mw : 0); printf("| %s | %s | %d | %.2f | %d | %.2f | %.2f |\n", os, run, nc, mc, nw, mw, fac) } }
