#!/usr/bin/env bash
set -E -o pipefail; set +H; umask 022

ROOT="$(git rev-parse --show-toplevel 2>/dev/null || pwd)"
cd "$ROOT" || exit 1

# ---- ensure garden worktree on branch 'garden' ----
if ! git show-ref --verify --quiet refs/heads/garden; then
  git branch garden 2>/dev/null || git checkout -b garden
fi
mkdir -p .garden
if [ ! -d ".garden/.git" ]; then
  git worktree add -f .garden garden
fi

# ---- derive metadata for sharding ----
UTC="$(date -u +%Y-%m-%dT%H:%M:%SZ)"
DAY="$(date -u +%Y/%m/%d)"
HEAD_SHA="$(git rev-parse --short=12 HEAD)"
BRANCH="$(git rev-parse --abbrev-ref HEAD)"
REPO_URL="$(git remote get-url origin 2>/dev/null || echo '.')"
HOST="$(hostname 2>/dev/null || echo unknown)"

# ---- pick up the latest receipt (or synthesize a minimal one) ----
mkdir -p .tau_ledger/receipts
RECENT="$(ls -1 .tau_ledger/receipts/*.json 2>/dev/null | tail -n1 || true)"
if [ -z "$RECENT" ]; then
  RECENT=".tau_ledger/receipts/receipt_${HEAD_SHA}.json"
  {
    echo '{'
    echo "  \"utc\": \"$UTC\","
    echo "  \"repo\": \"$REPO_URL\","
    echo "  \"branch\": \"$BRANCH\","
    echo "  \"head\": \"$HEAD_SHA\","
    echo '  "note": "synthetic receipt (no prior CI receipt found)"'
    echo '}'
  } > "$RECENT"
fi

# ---- collect local artifacts to publish (best-effort, skip if missing) ----
A_SCAN="analysis/bash_theta_scan.tsv"
A_MORSE="analysis/morse_crit.tsv"
A_LINE="analysis/atlas_line.tsv"
A_PLOTS=(analysis/plots/*.svg)
A_LEDGER="$(ls -1 .tau_ledger/langlands/phase_next_*.sha 2>/dev/null | tail -n1 || true)"

# ---- compute quick facts ----
rows=0; [ -f "$A_SCAN" ] && rows="$(wc -l < "$A_SCAN" 2>/dev/null || echo 0)"
mins=0; [ -f "$A_MORSE" ] && mins="$(grep -Ec $'\t(min|minim)um\b' "$A_MORSE" 2>/dev/null || echo 0)"

best_D=""; best_S=""; best_T=""
if [ -f "$A_SCAN" ]; then
  # find best Δ by simple pass (skip header)
  first=1
  while IFS=$'\t' read -r s t d _rest; do
    if [ "$first" = 1 ]; then first=0; case "$s" in ''|*[!0-9-]* ) continue;; esac; fi
    case "$d" in ''|*[!0-9-]* ) continue;; esac
    if [ -z "$best_D" ] || [ "$d" -lt "$best_D" ]; then best_D="$d"; best_S="$s"; best_T="$t"; fi
  done < "$A_SCAN"
fi

# ---- destination shard in garden ----
DEST=".garden/contrib/${DAY}/${HOST}/${HEAD_SHA}"
mkdir -p "$DEST"

# copy artifacts that exist
cp -f "$RECENT" "$DEST/" 2>/dev/null || true
[ -f "$A_SCAN" ]  && cp -f "$A_SCAN"  "$DEST/" || true
[ -f "$A_MORSE" ] && cp -f "$A_MORSE" "$DEST/" || true
[ -f "$A_LINE" ]  && cp -f "$A_LINE"  "$DEST/" || true
for p in "${A_PLOTS[@]}"; do [ -f "$p" ] && cp -f "$p" "$DEST/" || true; done
[ -n "$A_LEDGER" ] && cp -f "$A_LEDGER" "$DEST/" || true

# write a tiny meta manifest
{
  echo "utc=$UTC"
  echo "repo=$REPO_URL"
  echo "branch=$BRANCH"
  echo "head=$HEAD_SHA"
  echo "host=$HOST"
  echo "scan_rows=$rows"
  echo "minima=$mins"
  [ -n "$best_D" ] && echo "best_delta=$best_D"
  [ -n "$best_S" ] && echo "best_S=$best_S"
  [ -n "$best_T" ] && echo "best_T=$best_T"
} > "$DEST/meta.env"

# append a single-line JSON to an index (easy to grep/jq later)
IDX=".garden/index.jsonl"
{
  printf '{'
  printf '"utc":"%s",' "$UTC"
  printf '"repo":%s,' "$(printf '%s' "$REPO_URL" | jq -R '.')"
  printf '"branch":%s,' "$(printf '%s' "$BRANCH"   | jq -R '.')"
  printf '"head":"%s",' "$HEAD_SHA"
  printf '"host":%s,' "$(printf '%s' "$HOST" | jq -R '.')"
  printf '"scan_rows":%s,' "${rows:-0}"
  printf '"minima":%s' "${mins:-0}"
  if [ -n "$best_D" ]; then
    printf ',"best":{"delta":%s,"S_micro":%s,"T_micro":%s}' "$best_D" "${best_S:-null}" "${best_T:-null}"
  fi
  printf '}\n'
} >> "$IDX" 2>/dev/null || {
  # if jq isn't present, fall back to a simpler line
  echo "{\"utc\":\"$UTC\",\"repo\":\"$REPO_URL\",\"branch\":\"$BRANCH\",\"head\":\"$HEAD_SHA\",\"host\":\"$HOST\",\"scan_rows\":${rows:-0},\"minima\":${mins:-0}}" >> "$IDX"
}

# lightweight README seed/update
RD=".garden/README.md"
if [ ! -s "$RD" ]; then
  {
    echo "# τ-Crystal Automorphic Garden"
    echo
    echo "This branch collects contributed receipts and Δ-surface artifacts, sharded by date/host/commit."
    echo
    echo "- **index**: \`index.jsonl\` (JSON lines; append-only)"
    echo "- **contrib/**: receipts + selected analysis/plots"
    echo
    echo "_Generated by scripts/meta/garden_publish.sh_."
  } > "$RD"
fi

# commit & push garden
git -C .garden add -A
git -C .garden commit -m "garden: ingest ${HOST}@${HEAD_SHA} rows=${rows} minima=${mins}" 2>/dev/null || true
git -C .garden push -u origin garden

echo "[garden] published -> branch 'garden' at $(git -C .garden rev-parse --short HEAD)"
echo "[garden] shard: $DEST"
