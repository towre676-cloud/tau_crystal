#!/usr/bin/env bash
set -euo pipefail
ROOT="$HOME/Desktop/tau_crystal/tau_crystal"; cd "$ROOT" || { echo "[err] bad root"; exit 1; }
README="README.md"; [ -f "$README" ] || : > "$README"
VERI="$(mktemp)"; GOLD="$(mktemp)"
printf "%s\n" "## Verify this release (v0.1.1)" >>"$VERI"
printf "\n%s\n" "```bash" >>"$VERI"
printf "%s\n" "# fetch and checkout the release tag" >>"$VERI"
printf "%s\n" "git fetch --tags --quiet && git checkout v0.1.1" >>"$VERI"
printf "\n%s\n" "# run the built-in chain + manifest checks" >>"$VERI"
printf "%s\n" "bash scripts/plan/tau_pro_gate.sh" >>"$VERI"
printf "%s\n" "bash scripts/plan/write_roots.sh" >>"$VERI"
printf "%s\n" "TAU_MAX_SHARDS=\${TAU_MAX_SHARDS:-4} ./scripts/plan/launch_verifiers.sh" >>"$VERI"
printf "\n%s\n" "# 1) CHAIN head must match the sha256 of its receipt file" >>"$VERI"
printf "%s\n" "rcpt=\$(awk '{p=\$2}' END'{print p}' .tau_ledger/CHAIN)" >>"$VERI"
printf "%s\n" "head=\$(awk 'END'{print \$1}' .tau_ledger/CHAIN)" >>"$VERI"
printf "%s\n" "calc=\$(sha256sum \"\$rcpt\" | awk '{print \$1}')" >>"$VERI"
printf "%s\n" "[ \"\$calc\" = \"\$head\" ] && echo \"OK: chain head verified\" || echo \"FAIL: chain head mismatch\"" >>"$VERI"
printf "\n%s\n" "# 2) Manifest merkle_root must equal receipt.reflective.merkle_root" >>"$VERI"
printf "%s\n" "if command -v jq >/dev/null 2>&1; then" >>"$VERI"
printf "%s\n" "  m=\$(jq -r .merkle_root tau-crystal-manifest.json 2>/dev/null || true)" >>"$VERI"
printf "%s\n" "  [ -z \"\$m\" ] && [ -f docs/manifest.md ] && m=\$(grep -iE '^MERKLE_ROOT:[[:space:]]*[0-9a-fA-F]{64}' docs/manifest.md | awk -F: '{gsub(/^[[:space:]]+/,"",$2); print $2}' | tr -d '[:space:]')" >>"$VERI"
printf "%s\n" "  r=\$(jq -r .reflective.merkle_root \"\$rcpt\" 2>/dev/null || jq -r .merkle_root \"\$rcpt\" 2>/dev/null)" >>"$VERI"
printf "%s\n" "else" >>"$VERI"
printf "%s\n" "  m=\$(grep -oE '\"merkle_root\"[[:space:]]*:[[:space:]]*\"[^\"]*\"' tau-crystal-manifest.json 2>/dev/null | sed -E 's/.*:\"([^\"]*)\".*/\\1/' | head -n1)" >>"$VERI"
printf "%s\n" "  [ -z \"\$m\" ] && [ -f docs/manifest.md ] && m=\$(grep -iE '^MERKLE_ROOT:[[:space:]]*[0-9a-fA-F]{64}' docs/manifest.md | awk -F: '{gsub(/^[[:space:]]+/,"",$2); print $2}' | tr -d '[:space:]')" >>"$VERI"
printf "%s\n" "  r=\$(awk '{if (match($0, /\\"merkle_root\\"[[:space:]]*:[[:space:]]*\\"([0-9a-fA-F]{64})\\"/, a)) {print a[1]; exit}}' \"\$rcpt\")" >>"$VERI"
printf "%s\n" "fi" >>"$VERI"
printf "%s\n" "[ -n \"\$m\" ] && [ \"\$m\" = \"\$r\" ] && echo \"OK: manifest â†” receipt root\" || echo \"FAIL: root mismatch\"" >>"$VERI"
printf "%s\n" "```" >>"$VERI"
printf "%s\n" "## Golden diff (one screen)" >>"$GOLD"
printf "%s\n" "```bash" >>"$GOLD"
printf "%s\n" "# 1) baseline receipt" >>"$GOLD"
printf "%s\n" "bash scripts/plan/write_roots.sh; TAU_MAX_SHARDS=2 ./scripts/plan/launch_verifiers.sh" >>"$GOLD"
printf "%s\n" "base=\$(tail -n1 .tau_ledger/CHAIN | awk '{print $1}')" >>"$GOLD"
printf "%s\n" "" >>"$GOLD"
printf "%s\n" "# 2) tiny perturbation to a tracked file (no commit); rerun" >>"$GOLD"
printf "%s\n" "printf \" \" >> README.md" >>"$GOLD"
printf "%s\n" "bash scripts/plan/write_roots.sh; TAU_MAX_SHARDS=2 ./scripts/plan/launch_verifiers.sh" >>"$GOLD"
printf "%s\n" "head=\$(tail -n1 .tau_ledger/CHAIN | awk '{print $1}')" >>"$GOLD"
printf "%s\n" "" >>"$GOLD"
printf "%s\n" "# 3) print the one-line diff and restore" >>"$GOLD"
printf "%s\n" "[ \"\$base\" = \"\$head\" ] && echo \"expected a diff, got none\" || echo \"golden diff: \$base -> \$head\"" >>"$GOLD"
printf "%s\n" "git checkout -- README.md" >>"$GOLD"
printf "%s\n" "```" >>"$GOLD"
if ! grep -q "^## Verify this release (v0\.1\.1)" "$README"; then
  TMP="$(mktemp)"; awk -v a="$VERI" -v b="$GOLD" 'BEGIN{ins=0} {print} /^## Quickstart$/ && !ins {print ""; while((getline l<a)>0) print l; close(a); print ""; while((getline l<b)>0) print l; close(b); print ""; ins=1}' "$README" >"$TMP" && mv "$TMP" "$README"
fi
grep -q "^## Golden diff" "$README" || { printf "\n" >>"$README"; cat "$GOLD" >>"$README"; }
rm -f "$VERI" "$GOLD"
echo "[readme] inserted verify + golden diff (idempotent, v0.1.1)."
